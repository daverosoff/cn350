<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="PDA-intro" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Intro to pushdown automata</title>
    <objectives>
        <ol>
            <li>Learn stuff</li>
        </ol>
    </objectives>
    <subsection xml:id="subsec-informal-definition">
        <title>Informal definition</title>
        <p>
            We imagine a <term>pushdown automaton</term> or PDA as being like an
            <m>\varepsilon</m>-NFA with
            a <term>stack</term> attached. We still use transitions
            to move from one state to another. Like <m>\varepsilon</m>-NFA,
            PDA are nondeterministic and can <q>spontaneously</q> transition
            without consuming input. This is not a big new idea.
        </p>
        <p>
            On the other hand, the transition function for a PDA uses
            both the input word and the stack as part of the input. That
            is, the transitions that are available are determined in part
            by the contents of the stack as well as the remaining part
            of the input word.
        </p>
        <p>
            Both <m>\varepsilon</m>-transitions and normal transitions
            have the chance to alter the stack on their way to the new
            state. A transition may:
            <ol>
                <li>Pop the top symbol off the stack (it vanishes forever)</li>
                <li>Push one or more symbols onto the top of the stack</li>
            </ol>
            Both these alterations are optional, but if both occur, the pop
            is always first.
        </p>
        <p>
            In the formal specification given in <xref ref="subsec-formal-specification"/>,
            you will see that the set of stack symbols is allowed to be different
            from the alphabet <m>\Sigma</m>. In fact, it always is different, because
            we need a special start symbol that has no job but being the bottom
            of the stack.
        </p>
        <p>
            Acceptance for PDA is somewhat like acceptance for NFA. PDA have a set of
            states designated as accepting states, and if there is a <q>branch</q>
            of the nondeterministic computation that lands in an accepting state when
            the input word is consumed, the word is said to be in the accepting-state
            language of the PDA. As the phrasing suggests, there is a second definition
            of acceptance that is postponed until HMU section 6.2. This is called empty-stack
            acceptance, and we will see it is quite natural.
        </p>
        <warning>
            <p>
                For any particular PDA <m>A</m>, the accepting-state language <m>L(A)</m>
                and the empty-stack language <m>N(A)</m> are typically different.
            </p>
        </warning>
        <!-- <example>
            <p>
                Here is a PDA whose accepting-state language is the non-regular but
                context-free language <m>0^n1^n</m>. It has three states, <m>q</m>,
                <m>r</m>, and <m>s</m>. The state <m>q</m> is the initial state and the
                state <m>s</m> is the only accepting state.
            </p>
            <p>
                For transitions, suppose first that we are in state <m>q</m>.
                <ol>
                    <li>
                        <p>
                            If we read a <m>0</m>, we push a <m>0</m>
                            onto the top of the stack and remain in state
                            <m>q</m>.
                        </p>
                    </li>
                    <li>
                        <p>
                            If we read a <m>1</m>, we look at the top of
                            the stack. If there is a <m>0</m> there, we
                            pop and go to state <m>r</m>. If there is
                            instead the bottom symbol <m>Z</m>, or anything
                            else, there
                            is no transition and we reject the input.
                        </p>
                    </li>
                </ol>
                Now let us list the transitions available in state <m>r</m>.
                <ol>
                    <li>
                        <p>
                            If we read a <m>1</m>, we look at the stack.
                            If there is a <m>0</m> there, we pop the stack and
                            remain in state <m>r</m>. If there is anything
                            else, there is no transition and we reject the
                            input.
                        </p>
                        <p>
                            There is an <m>\varepsilon</m>-transition
                        </p>
                    </li>
                </ol>
            </p>
        </example> -->
    </subsection>
    <subsection xml:id="subsec-formal-specification">
        <title>Formal specification</title>
        <p>
            The formal specification of a PDA looks like this:<men xml:id="eqn-formal-spec-npda">
                P = (Q, \Sigma, \Gamma, \delta, q_0, Z_0, F)
            </men>.
            Here
            <ul>
                <li>
                    <m>Q</m> is the set of states
                </li>
                <li>
                    <m>\Sigma</m> is the alphabet (the input symbols)
                </li>
                <li>
                    <m>\Gamma</m> is the set of stack symbols
                </li>
                <li>
                    <m>\delta</m> is the transition function, explained
                    in more detail below
                </li>
                <li>
                    <m>q_0</m> is the initial state (we assume <m>q_0 \in Q</m>)
                </li>
                <li>
                    <m>Z_0</m> is the bottom stack symbol (we assume
                    that <m>Z_0 \in \Gamma</m>)
                </li>
                <li>
                    <m>F</m> is the set of accepting states (we assume
                    that <m>F \subseteq Q</m>)
                </li>
            </ul>
            We usually don't give tables for the transition function,
            instead preferring lengthy verbal descriptions. The reason
            is that the domain is the product of three sets, namely
            <m>Q \times \Sigma \times \Gamma</m> and thus instead of
            a 2-d table of input values we have a 3-d cube of them.
        </p>
        <activity>
            <statement>
                <p>
                    (This is Exercise 6.1.1 from HMU.) Suppose that <me>
                        P = (\{q, p\}, \{0, 1\}, \{Z_0, X\}, \delta, q, Z_0, \{p\})
                    </me>
                    is a PDA, and that <m>\delta</m> is described by the
                    following rules.
                    <ol>
                        <li>
                            <p>
                                <m>\delta(q, 0, Z_0) = \{(q, XZ_0)\}</m>. This
                                means that if in state <m>q</m>, we read a <m>0</m>
                                and there is <m>Z_0</m> on the top of the stack,
                                we can (and must) remain in state <m>q</m>,
                                consume the <m>0</m>, do not pop, and push an <m>X</m>
                                on the stack. The pair <m>(q, XZ_0)</m> represents
                                the new state and the new stack top (read from top to bottom
                                as we go left to right, so the <m>Z_0</m> is still
                                there and the <m>X</m> is on top of it).
                            </p>
                        </li>
                        <li>
                            <p>
                                <m>\delta(q, 0, X) = \{ (q, XX) \}</m>
                            </p>
                        </li>
                        <li>
                            <p>
                                <m>\delta(q, 1, X) = \{ (q, X) \}</m>
                            </p>
                        </li>
                        <li>
                            <p>
                                <m>\delta(q, \varepsilon, X) = \{ (p, \varepsilon) \}</m>
                            </p>
                        </li>
                        <li>
                            <p>
                                <m>\delta(p, \varepsilon, X) = \{ (p, \varepsilon) \}</m>
                            </p>
                        </li>
                        <li>
                            <p>
                                <m>\delta(p, 1, X) = \{ (p, XX) \}</m>
                            </p>
                        </li>
                        <li>
                            <p>
                                <m>\delta(p, 1, Z_0) = \{ (p, \varepsilon) \}</m>
                            </p>
                        </li>
                    </ol>
                </p>
                <p>
                    Show all the reachable instantaneous descriptions when the input
                    <m>w</m> is:
                    <ol marker="A">
                        <li><m>01</m></li>
                        <li><m>0011</m></li>
                        <li><m>010</m></li>
                    </ol>
                </p>
            </statement>
        </activity>
    </subsection>
</section>
