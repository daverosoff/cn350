<?xml version='1.0' encoding='utf-8'?>
<section xml:id="DFA" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Deterministic finite automata</title>
  <objectives>
    <ul>
      <li>
        <!-- <xi:include href="outcomes/02.ptx" /> -->
      </li>
    </ul>
  </objectives>
  <subsection>
    <title>Class Activities</title>
    <activity>
      <statement>
        <p>
          Give diagrams or tables for DFAs accepting the following languages over the alphabet
          <m>\{0,1\}</m>. Make sure your answers include at least one table
          and one diagram.
        </p>
        <ol marker="A.">
          <li>The set of all strings ending in 00</li>
          <li>The set of all strings with three consecutive 0s (not necessarily at the end)</li>
          <li>The set of all strings with 011 as a substring.</li>
        </ol>
      </statement>
    </activity>
    <p>
      In the reading, you have seen how a DFA is like a very simple computer,
      modeled by walks on a directed graph. Each move in the walk is determined
      by the transition function of the DFA as we <q>consume</q> the characters
      in the input string one by one.
    </p>
    <activity>
      <introduction>
        <p>
          For each pictured DFA, give a simple description of the language it accepts.
          Get the instructor to check before moving on.
        </p>
      </introduction>
      <task>
        <image width="50%">
          <latex-image>
            \begin{tikzpicture}[on grid, scale=0.5]
              \node[state, initial] (q1) {$q_1$};
              \node[state, accepting, right=of q1] (q2) {$q_2$};
              \path[->]
                (q1) edge[loop above] node {0} (q1)
                    edge[bend left] node {1} (q2)
                (q2) edge[loop above] node {1} (q2)
                    edge[bend left] node {0} (q1);
            \end{tikzpicture}
          </latex-image>
        </image>
      </task>
      <task>
        <image width="50%">
          <latex-image>
            \begin{tikzpicture}[on grid, scale=0.5]
              \node[state, initial, accepting] (q1) {$q_1$};
              \node[state, right=of q1] (q2) {$q_2$};
              \path[->]
                (q1) edge[loop above] node {0} (q1)
                    edge[bend left] node {1} (q2)
                (q2) edge[loop above] node {1} (q2)
                    edge[bend left] node {0} (q1);
            \end{tikzpicture}
          </latex-image>
        </image>
      </task>
      <task>
        <image width="70%">
          <latex-image>
            \begin{tikzpicture}[on grid, scale=0.5]
              \node[state, initial, initial where=above] (S) {$S$};
              \node[state, below left=of S] (q1) {$q_1$};
              \node[state, below right=of S] (r1) {$r_1$};
              \node[state, below=of q1] (q2) {$q_2$};
              \node[state, below=of r1] (r2) {$r_2$};
              \path[->]
                (S) edge[auto=above] node {\texttt{a}} (q1)
                edge node {\texttt{b}} (r1)
                (q1) edge[loop left] node {\texttt{a}} (q1)
                edge[left, bend right] node {\texttt{b}} (q2)
                (q2) edge[loop left] node {\texttt{b}} (q2)
                edge[right, bend right] node {\texttt{a}} (q1)
                (r1) edge[loop right] node {\tt b} (r1)
                edge[left, bend right] node {\tt a} (r2)
                (r2) edge[loop right] node {\tt a} (r2)
                edge[right, bend right] node {\tt b} (r1);
            \end{tikzpicture}
          </latex-image>
        </image>
      </task>
    </activity>
    <p>
      When designing a DFA or other automaton, it can be helpful to imagine yourself as the
      DFA and consider your cognition as you read the input word one symbol at a time.
      What must you remember about the string? How do you perform the DFA's task? It helps
      when doing this to remember that the word might be very long, so long you can't remember it all
      at once. You also don't know when the string will end, so you must always be ready with the
      answer.
    </p>
    <p>
      Suppose that the alphabet is <m>\Sigma = \{0,1\}</m> and we wish to
      accept all words with an odd number of 1s. If you start going through a
      long input string of 0s and 1s, one symbol at a time, do you need to see
      the whole string? Do you need to remember any of it? No, you simply keep
      track of whether the number of 1s you have seen <em>so far</em> is even
      or odd.
    </p>
    <p>
      This gives a clue to the design of the DFA. There are two states
      <m>q_0</m> and <m>q_1</m>, corresponding to having seen an even or odd
      number of 1s so far. We begin in state <m>q_0</m>, since at the
      beginning, we haven't <q>seen</q> any symbols and in particular have seen
      no 1s. Now the transitions should be clear: all transitions labeled with
      <m>0</m> are self-loops, since the number of 1s does not change. Similarly,
      each transition labeled with <m>1</m> changes state, because whenever we
      read a 1, the number of 1s seen so far changes parity.
    </p>
    <p>
      There is just one accepting state, state <m>q_1</m>, because that is the
      condition for having seen an odd number of 1s so far. If we are in state
      <m>q_1</m> when the input ends, we win; otherwise, our string must be
      rejected.
    </p>
    <activity>
      <statement>
        <p>Give a transition diagram and transition table for each language. Get the instructor to check
          before you go on.
        </p>
        <ol marker="A.">
          <li>
            <p>Words on <m>\Sigma = \{a, b\}</m> with an odd number of b.</p>
          </li>
          <li>
            <p>Words on <m>\Sigma = \{0, 1\}</m> that start with 000.</p>
          </li>
          <li>
            <p>Words on <m>\Sigma = \{0, 1\}</m> that end in 11.</p>
          </li>
        </ol>
      </statement>
    </activity>
    <activity>
      <statement>
        <p>
          Give DFAs accepting the following languages over the alphabet
          <m>\{0,1\}</m>:
        </p>
        <ol marker="A.">
          <li>The set of all strings <m>x</m> beginning with a 1 such that, when
          <m>x</m> is interpreted as a binary integer, it is a multiple of 3. For example,
          strings 0, 11, 110, and 1111 are in the language, while
          10, 100, and 111 are not.</li>
          <li><p>The set of all such strings that, when interpreted <em>in reverse</em>
          as binary integers, are multiples of 3. Examples of strings in the
          language are 0, 00011, and 1001000. Observe there is no restriction
          on the leading digit in this part.</p></li>
        </ol>
      </statement>
      <hint>
        <p>
          There is an interpretation with 3 states using ideas from modular arithmetic.
        </p>
      </hint>
    </activity>
    <activity>
      <statement>
        <p>
          Make a DFA that is equivalent to the marble-rolling toy
          of <xref ref="act-marble-toy"/>. This will take some thought. I did it with
          16 states originally, and 13 of them turned out to be accessible.
        </p>
      </statement>
      </activity>
    <activity xml:id="act-extended-trans-induction">
      <statement>
        <p>
          Recall that if
          <m>A = (Q, \Sigma, q_0, \delta, F)</m>
          is an automaton, we defined the
          <em>extended transition function</em>
          inductively for a word <m>x = ya</m>
          (where
          <m>\abs{y} \geq 0</m>
          ) by
          <me>
            \hat{\delta}(q, x) = \begin{cases}
              q \amp \text{if $\abs{x} = 0$} \\
              \delta(\hat{\delta}(q, y), a) \amp
              \text{if $x = ya$}.
            \end{cases}
          </me>
          However, we think informally about
          <m>\hat{\delta}</m>
          as describing what happens along a path with a certain
          string of labels. So it should not matter how we break
          the input string in the definition of
          <m>\hat{\delta}</m>. That is, we should be able to
          use any factorization <m>x = yz</m>, not just one with
          <m>\abs{z} = 1</m>.
          Use induction on
          <m>\abs{z}</m>
          to prove that
          <me>
            \hat{\delta}(q, yz) = \hat{\delta}(\hat{\delta}(q, y), z)
          </me>.
        </p>
      </statement>
    </activity>
    <activity>
      <statement>
        <p>
          Show that for any state <m>q</m>, string <m>x</m>,
          and input symbol <m>a</m>,
          <me>
            \hat{\delta}(q, ax) = \hat{\delta}(\delta(q, a), x)
          </me>.
        </p>
      </statement>
      <hint>
        <p>
          Use the result of
          <xref ref="act-extended-trans-induction"/>.
        </p>
      </hint>
    </activity>
    <activity>
      <statement>
        <p>
          Give DFAs accepting the following languages over the alphabet
          <m>\{0,1\}</m>:
        </p>
        <ol marker="A.">
          <li>The set of all strings such that each block of 5 consecutive
          symbols contains at least two 0s</li>
          <li>The set of all string whose tenth symbol from
          the right is a 1</li>
          <li>The set of strings that either begin or end
          (or both) with 01</li>
          <li>The set of strings such that the number of 0s
          is divisible by 5 and the number of 1s is divisible
          by 3</li>
        </ol>
      </statement>
    </activity>

    <activity>
      <statement>
        <p>
          Let <m>A</m> be a DFA and <m>q</m> a particular state of <m>A</m>,
          such that <m>\delta(q, a) = q</m> for all <m>a \in \Sigma</m>. Show by
          induction on <m>\abs{w}</m> that <m>\hat{\delta}(q, w) = q</m> for all
          input words <m>w</m>.
        </p>
      </statement>
    </activity>
    <activity>
      <statement>
        <p>
          Let <m>A</m> be a DFA and <m>q</m> a particular state of <m>A</m>,
          such that <m>\delta(q, a) = q</m> for all <m>a \in \Sigma</m>.
        </p>
        <ol>
          <li>
            <p>
              Show by induction on <m>n</m> that for all <m>n \geq 0</m>,
              <m>\hat{\delta}(q, a^n) = q</m>, where <m>a^n</m> is the
              string consisting of <m>n</m> <m>a</m><rsq/>s.
            </p>
          </li>
          <li>
            <p>
              Show that either <m>\{a\}^{\ast} \subseteq L(A)</m>
              or <m>\{a\}^{\ast} \cap L(A) = \varnothing</m>.
            </p>
          </li>
        </ol>
      </statement>
    </activity>
    <p>
      We use the exponential notation for concatenation of words as well as individual
      input symbols from <m>\Sigma^{\ast}</m>.
    </p>
    <activity>
      <statement>
        <p>
          Let <m>A = (Q, \Sigma, \delta, q_0, \{q_f\})</m>
          be a DFA, and suppose that for all <m>a \in \Sigma</m>
          we have
          <me>
            \delta(q_0, a) = \delta(q_f, a)
          </me>.
        </p>
        <ol marker="A.">
          <li>
            <p>
              Show that for all <m>w \ne \varepsilon</m>
              we have <m>\hat{\delta}(q_0, w) = \hat{\delta}(q_f, w)</m>.
            </p>
          </li>
          <li>
            <p>
              Show that if <m>x</m> is a nonempty string in <m>L(A)</m>,
              then for all <m>k > 0</m>, then <m>x^k</m>, the <m>k</m>-fold
              concatenation of <m>x</m>, is also in <m>L(A)</m>.
            </p>
          </li>
        </ol>
      </statement>
    </activity>
    <activity>
      <statement>
        <p>
          Consider the DFA with the following transition table:
        </p>
        <tabular>
          <col align="right"/><col/><col/>
          <row header="yes">
            <cell></cell>
            <cell>0</cell>
            <cell>1</cell>
          </row>
          <row>
            <cell><m>\to A</m></cell>
            <cell><m>A</m></cell>
            <cell><m>B</m></cell>
          </row>
          <row>
            <cell><m>\ast B</m></cell>
            <cell><m>B</m></cell>
            <cell><m>A</m></cell>
          </row>
        </tabular>
        <p>
          Informally describe the language accepted by this DFA,
          and prove by induction on the length of the input that
          your description is correct.
        </p>
      </statement>
      <hint>
        <p>
          When setting up the inductive hypothesis, it is wise
          to make a statement about what inputs get you to each state,
          not just what inputs get you to the accepting state.
        </p>
      </hint>
    </activity>
  </subsection>
</section>
