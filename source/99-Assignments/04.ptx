<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec-hw4" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Homework 04</title>
  <p>
    This assignment covers 5.1 and 5.2 in HMU. Each problem will be worth 3
    checks. Your answers should be like little essays, made only of complete
    sentences. Formulas should never stand on their own, but should be parts of
    otherwise complete sentences. You should be able to read your answer aloud
    from beginning to end and have it sound sensible. If your solution is more
    like a pile of equations, with little or no connecting narration, you'll
    max out at 2 checks.
  </p>
  <exercises xml:id="exercises-hw4">
    <exercise>
        <introduction>
            <p>
                <xref first="hw04-p1-task1" last="hw04-p1-task3" text="local">Parts</xref>
                are worth 3 checks each.
                Complete <xref ref="hw04-p1-task4" text="local">Part</xref>
                for an additional 3 bonus checks.
            </p>
            <p>
                Consider the following grammar: <mdn>
                    <mrow xml:id="hw04-S-rule">S \amp \to aB \mid Ba</mrow>
                    <mrow xml:id="hw04-A-rule">A \amp \to aS \mid bAA \mid a</mrow>
                    <mrow xml:id="hw04-B-rule">B \amp \to bS \mid aBB \mid b</mrow>
                </mdn>.
            </p>
        </introduction>
        <task xml:id="hw04-p1-task1">
            <statement>
                <p>
                    Write down a recursive inference table giving at least four
                    strings of length at least <m>4</m> that are in the language
                    of <m>A</m>.
                </p>
            </statement>
        </task>
        <task xml:id="hw04-p1-task2">
            <statement>
                <p>
                    Write down either leftmost or rightmost derivations giving
                    at least four strings of length at least <m>4</m> that are
                    in the language of <m>B</m>.
                </p>
            </statement>
        </task>
        <task xml:id="hw04-p1-task3">
            <statement>
                <p>
                    Use either leftmost derivations or recursive inference
                    to find at least four strings of length at least <m>4</m>
                    that are in <m>L(S)</m>, and make a conjecture about
                    which strings are in the language of the above grammar.
                </p>
            </statement>
        </task>
        <task xml:id="hw04-p1-task4">
            <statement>
                <p>

                    Prove that your conjecture from
                    <xref ref="hw04-p1-task3" text="local">Part</xref>
                    is correct.

                </p>
            </statement>
        </task>
    </exercise>
    <exercise>
        <statement>
            <p>
                Let <m>T = \{ 0, 1, (, ), +, \emptyset, e \}</m>. We may
                think of <m>T</m> as the set of symbols used by regular
                expressions over alphabet <m>\{0, 1\}</m>. The only difference
                is that we use <m>e</m> for symbol <m>\varepsilon</m>, to avoid
                potential confusion in what follows. Design a CFG with set
                of terminals <m>T</m> that generates exactly the regular
                expressions with alphabet <m>\{0, 1\}</m>.
            </p>
        </statement>
    </exercise>
    <exercise xml:id="hw04-exer-regex-to-cfg">
        <statement>
            <p>

                Describe, in general terms, a recursive method to convert a
                regular expression to an equivalent context-free grammar.
                You do <em>not</em> need to prove that your method is correct.

            </p>
            <p>

                <q>General</q> here does not mean <q>vague</q>, but rather that
                your explanation is not tied to a specific example. You must be
                general and precise at once. It should be quite clear how to
                add the productions to the grammar based on the form of the
                regular expression.

            </p>
        </statement>
        <hint>
            <p>

                Use the recursive definition of a regular expression. That is,
                explain how to handle the base cases directly and give a
                general explanation of how to handle the recursive cases.


            </p>
        </hint>
    </exercise>
    <exercise>
        <introduction>
            <p>
                Each part of this problem is worth 3 checks.
            </p>
            <p>
                A context-free grammar is said to be <term>right-linear</term>
                if each production body has at most one variable, and that
                variable is at the right end. That is, all productions of
                a right-linear grammar are of the form <m>A \to wB</m> or
                <m>A \to w</m>, where <m>A</m> and <m>B</m> are variables
                and <m>w</m> a string of zero or more terminals.
            </p>
        </introduction>
        <task>
            <statement>
                <p>
                    In the same sense as <xref ref="hw04-exer-regex-to-cfg"/>,
                    give a general method to convert a right-linear grammar
                    to an <m>\varepsilon</m>-NFA. This shows that right-linear
                    grammars are at least as powerful as
                    <m>\varepsilon</m>-NFAs (equivalently, DFAs, regular expressions, etc.)
                </p>
            </statement>
            <hint>
                <p>
                    Construct an <m>\varepsilon</m>-NFA that simulates
                    leftmost derivations, using its state to represent
                    the lone variable in the current left-sentential
                    form.
                </p>
            </hint>
        </task>
        <task>
            <statement>
                <p>
                    Give a general method for converting a DFA into a right-linear
                    grammar. Combined with the previous part, this shows
                    that right-linear grammars recognize exactly the regular
                    languages.
                </p>
            </statement>
            <hint>
                <p>
                    Start with a DFA and let the variables of the grammar
                    represent states.
                </p>
            </hint>
        </task>
    </exercise>
    <exercise>
        <statement>
            <p>
                For each string below, find a parse tree that shows how
                it is generated by the grammar.
                <md>
                    <mrow>S \amp \to A1B</mrow>
                    <mrow>A \amp \to 0A \mid \varepsilon</mrow>
                    <mrow>B \amp \to 0B \mid 1B \mid \varepsilon</mrow>
                </md>
                <ol>
                    <li><m>00101</m></li>
                    <li><m>1001</m></li>
                    <li><m>00011</m></li>
                </ol>
            </p>
        </statement>
    </exercise>
  </exercises>
</section>
