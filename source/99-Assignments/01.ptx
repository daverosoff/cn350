<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec-hw1" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Homework 01</title>
  <p>This assignment covers 2.1 and 2.2 in HMU. Each problem will be worth 3 checks. Your answers
    should be like little essays, made only of complete sentences. Formulas should never stand
    on their own, but should be parts of otherwise complete sentences. You should be able to read
    your answer aloud from beginning to end and have it sound sensible. If your solution is
    more like a pile of equations, with little or no connecting narration, you'll max out at 2 checks.
  </p>
  <exercises>
    <exercise>
      <statement>
        <p>
          The following are the transition diagrams of two DFA <m>M_1</m>
          and <m>M_2</m>. Answer the following questions about each one.
        </p>
        <ol>
          <li>What is the start state?</li>
          <li>What is the set of accepting states?</li>
          <li>What sequence of states does the machine go through on input <c>aabb</c>?</li>
          <li>Does the machine accept the string <c>aabb</c>?</li>
          <li>Does the machine accept the string <m>\epsilon</m>?</li>
        </ol>
        <sidebyside>
          <figure>
            <caption><m>M_1.</m></caption>
            <image width="30%">
              <latex-image>
                \begin{tikzpicture}[on grid, scale=0.5]
                \node[state, initial, initial where=up] (q1) {$q_1$};
                \node[state, accepting, right=of q1] (q2) {$q_2$};
                \node[state, below right=of q1] (q3) {$q_3$};
                \path[->]
                  (q1) edge[left, loop left] node {\tt b} (q1)
                  edge[bend left] node {\tt a} (q2)
                  (q2) edge[bend left] node {\tt a, b} (q3)
                  (q3) edge[bend left] node {\tt a} (q2)
                  edge[bend left] node {\tt b} (q1);
                \end{tikzpicture}
              </latex-image>
            </image>
          </figure>
          <figure xml:id="fig-m2">
            <caption><m>M_2</m>.</caption>
            <image width="30%">
              <latex-image>
                \begin{tikzpicture}[on grid, scale=0.5]
                \node[state, initial, initial where=up, accepting] (q1) {$q_1$};
                \node[state, right=of q1] (q2) {$q_2$};
                \node[state, below=of q1] (q3) {$q_3$};
                \node[state, accepting, below=of q2] (q4) {$q_4$};
                \path[->]
                  (q1) edge[loop left] node {\tt a} (q1)
                  edge[bend left] node {\tt b} (q2)
                  (q2) edge[left, bend right] node {\tt a} (q3)
                  edge[bend left] node {\tt b} (q4)
                  (q3) edge[right, bend right] node {\tt a} (q2)
                  edge[bend left] node {\tt b} (q1)
                  (q4) edge[bend left] node {\tt a} (q3)
                  edge[loop right] node {\tt b} (q3);
                \end{tikzpicture}
              </latex-image>
            </image>
          </figure>
        </sidebyside>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>Translate the transition diagram in <xref ref="fig-m2"/> into a formal
        specification. Carefully list all of the components (<m>Q</m>, <m>\Sigma</m>, <etc/>).</p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>The transition function of a DFA <m>M</m> is given by the following table. Use the table
        to give a transition diagram for this machine.</p>
        <p><alert>NOTE.</alert> This problem was updated. Make sure you inspect the table carefully.</p>
        <tabular>
          <row header="yes" bottom="minor">
            <cell right="minor"></cell>
            <cell><m>{\tt u}</m></cell>
            <cell>
              <m>{\tt d}</m>
            </cell>
          </row>
          <row>
            <cell right="minor"><m>\to \ast q_1</m></cell>
            <cell><m>q_1</m></cell>
            <cell><m>q_2</m></cell>
          </row>
          <row>
            <cell right="minor"><m>\ast q_2</m></cell>
            <cell><m>q_1</m></cell>
            <cell><m>q_3</m></cell>
          </row>
          <row>
            <cell right="minor"><m>q_3</m></cell>
            <cell><m>q_2</m></cell>
            <cell><m>q_4</m></cell>
          </row>
          <row>
            <cell right="minor"><m>q_4</m></cell>
            <cell><m>q_3</m></cell>
            <cell><m>q_5</m></cell>
          </row>
          <row>
            <cell right="minor"><m>q_5</m></cell>
            <cell><m>q_4</m></cell>
            <cell><m>q_5</m></cell>
          </row>
        </tabular>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          If <m>L</m> is a language (a subset of <m>\aster{\Sigma}</m>) then
          its <term>complement</term> is the language <me>
            \aster{\Sigma} - L = \{ x \in \aster{\Sigma} : x \notin L \}
          </me>.
        </p>
        <p>
          Show that if <m>M</m> is a DFA that accepts language <m>B</m>,
          then swapping the accept and nonaccept states in <m>M</m>
          yields a DFA that accepts <m>\aster{\Sigma} - B</m>.
        </p>
      </statement>
      <hint>
        <p>
          Start by supposing
          (your hypothesis) that a DFA <m>M</m> has been given, and it accepts <m>B</m>.
          That is to say, suppose <m>M</m> is a DFA such that <m>L(M) = B</m>.
          Use this assumption and what you have learned about DFA to argue
          persuasively and in detail that
          when the states are swapped, the resulting machine accepts all words
          not in <m>B</m> and rejects all words in <m>B</m>. Since you don't
          have a transition diagram to fall back on, you'll need to use the
          formal description of the DFA in terms of sets and functions.
        </p>
        <p>
          An earlier version of this Hint said that this isn't an induction proof.
          That was a little overeager. It is very possible to give a persuasive proof
          that doesn't use it, but I shouldn't have said you <em>can't</em>. In this
          particular case, though, I don't think the inductive argument is simpler or
          more convenient.
        </p>
      </hint>
    </exercise>
    <exercise>
      <statement>
        <p>
          For any word <m>w = a_1 a_2 \ldots a_n</m>, its <term>reverse</term> <m>w^R</m>
          is defined to be <me>w^R = a_n \ldots a_2 a_1</me>, so the symbols appear in the
          reverse order. Recall that a language is <term>regular</term> if it is accepted by some DFA.
          Show that if <m>B</m> is a regular language, so is the language <m>B^R</m>, where
          <me>
            B^R = \{ w^R : w \in B \}
          </me>.
        </p>
      </statement>
      <hint>
        <p>
          In the previous problem, a modification to the DFA was suggested:
          swap the accepting and non-accepting states. In this one, you will need
          to concoct the modification yourself, and give some of the details of why
          the resulting thing is a DFA.
        </p>
        <p>
          Since you don't have a transition diagram to fall back on, you'll need to use the
          formal description of the DFA in terms of sets and functions. There are two things to
          prove: first, that <m>B^R</m> contains all words <m>w^R</m> where <m>w \in B</m>,
          and second, that <m>B^R</m> does not contain any word that isn't the reverse of a word in
          <m>B</m>.
        </p>
      </hint>
      <solution>
        <p>
          Let a DFA accepting <m>B</m> be denoted <m>M</m>, and then we may also write
          <me>
            M = (Q, \Sigma, \delta, s, F)
          </me>.
          We define a pseudo-NFA <m>N = (Q, \Sigma, \eta, F, \{s\})</m>. Here the transition
          function <m>\eta \colon Q \times \Sigma \to 2^Q</m> is given by <me>
            \eta(q, a) = \{ r \in Q : \delta(r, a) = q \}
          </me>.
        </p>
        <p>
          It is clear that <m>N</m> is a pseudo-NFA, because we have given it a set of start
          states, a set of accepting states, and a transition function of the required shape.
          We also know that the subset construction will produce a DFA <m>N'</m> with
          <m>L(N') = L(N)</m>. Thus, it is enough to show that, for all
          <m>w \in \aster{\Sigma}</m>, we have
          <me>
            w \in B^R \implies \hat{\eta}(w, F) \owns s \quad \text{and} \quad
            w \notin B^R \implies \hat{\eta}(w, F) \not\ni s
          </me>.
          Let us prove a slightly stronger result by induction. Before the statement of the
          theorem, we pause for a remark.
        </p>
        <p>It's often the case that it is easier to prove a stronger version of a
            desired result by induction. This is because you get a stronger induction
            hypothesis (since it's a specialization of the desired result). Now to the
            promised theorem.</p>
        <p>We will prove the following. Let <m>w \in \aster{\Sigma}</m>. Then, for
          each state <m>q \in Q</m> and each state <m>r \in Q</m>, we have
          <men xml:id="eq-main-sol1">
            \hat{\delta}(q, w) \ni r \iff \hat{\eta}(r, w^R) \ni q
          </men>. The proof is by induction on <m>\abs{w}</m>. Observe first, before
          we begin the proof, that our main claim follows at once from the above.
        </p>
        <p>
          For the base case, we have <m>w = \varepsilon</m>, since <m>k = 0</m>.
          Then, for each <m>q</m> and <m>r</m> we will have <md>
            <mrow>
              \hat{\delta}(q, \varepsilon) \amp = \{q\} \text{ and }
            </mrow>
            <mrow>
              \hat{\eta}(r, \varepsilon) \amp = \{r\}</mrow>
          </md>. In this case <xref ref="eq-main-sol1"/> holds, because each side
          is true exactly when <m>r = q</m>. This is the definition of truth for
          biconditional statements like <m>P \implies Q</m>. Now we can proceed
          to the inductive step.
        </p>
        <p>
          Let us suppose that <m>w = xa</m> and that
          <xref ref="eq-main-sol1"/> holds for <m>x</m>. That is, suppose
          for all <m>u</m> and all <m>t</m>,
          <me>
            \hat{\delta}(u, x) \ni t \implies \hat{\eta}(t, x^R) \ni u
          </me>.
          Now choose <m>q</m> and <m>r</m>. Suppose first that
          <m>r \in \hat{\delta}(q, xa)</m>. We wish to deduce that
          <m>q \in \hat{\eta}(r, ax^R)</m>. By <xref ref="def-deltahat"/>,
          we then have
          <me>
            r \in \delta(\hat{\delta}(q, x), a)
          </me>. This means there is a transition labeled <m>a</m>
          from some state <m>t \in \hat{\delta}(q, x)</m> to <m>r</m>
          in <m>M</m>. By the construction of <m>N</m>, there is a
          transition labeled <m>a</m> from <m>r</m> to <m>t</m> in <m>N</m>.
          By hypothesis, we know that the state <m>r</m> is an element of
          <m>\hat{\eta}(t, x^R)</m>. Since there is a transition from <m>r</m>
          to <m>t</m> in <m>N</m> labeled <m>a</m>, it


          <me>
            w = a_1 a_2 \cdots a_k
          </me>,
          where each <m>a_i \in \Sigma</m> and <m>k = \abs{w}</m>. We may then
          write
          <me>

          </me>


           The proof is by </p>
      </solution>
    </exercise>
  </exercises>
</section>
