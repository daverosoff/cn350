<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec-hw3" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Homework 03</title>
  <p>

    This assignment covers sections 2.5 through 3.2 in HMU. Each problem will
    be worth 3 checks. Your code should be like floating little poems.
    Use comments wisely: don't explain the routine things, but the clever ones.
    Make your code transparent so that it is easy to read and understand.

  </p>
  <p>
    The assignment is worth 15 checks.

  </p>
  <exercises>
    <exercise xml:id="ex-implement-dfa">
      <introduction>
        <p>
          Write a single Python file <c>dfa.py</c> that implements the classes
          specified below with the indicated behavior. You may use any Python
          features you like, but you may not use any other modules (imports). You
          are explicitly instructed not to search for a solution to this problem.
          Obviously it will be very easy to find. Instead, use what you know from
          class and your existing programming skills. All the code you submit
          should be your own. Please also refrain from the use of any type of
          programming assistant (turn off AI gizmos like GitHub Copilot,
          IntelliSense, <etc/>).
        </p>
        <p>
          Keep the following philosophy in mind as you code. The intuitive,
          diagram-based idea of a DFA is not something easy to code. However,
          you also have access to the formal specification and much surrounding
          apparatus. I would suggest implementing DFA in terms of the formal
          specification: use it as your inspiration for how the class's fields
          should look.
        </p>
      </introduction>
      <task>
        <statement>
          <p>
            The class <c>DFA</c>. This class should have the following methods:
            <ol marker="1.">
              <li>a constructor that returns a usable DFA object</li>
              <li>a <c>__repr__()</c> method that dumps the current formal
              specification of the DFA to the output</li>
              <li>
                a <c>run()</c> method that simulates the action of the
                extended transition function <m>\hat{\delta}</m> (see
                <xref ref="def-deltahat"/>). This method should return
                a <c>bool</c> whose value indicates acceptance or rejection.
              </li>
            </ol>
            I have not specified the parameters. These are all instance methods
            of the class, so must take at least the parameter <c>self</c>.
            The DFA is nothing more than its formal specification, so you
            can start there.
          </p>
        </statement>
        <hint>
          <p>
            Use the data type <c>set</c> for <m>Q</m>, <m>\Sigma</m>, and <m>F</m>. Think
            about Python's types carefully before you choose how to implement <m>\delta</m>.
        </p>
        </hint>
      </task>
      <task>
        <statement>
          <p>
            The class <c>NFA</c>. This class should have the following methods.
            My remarks above about the parameters apply here as well.
            <ol marker="1.">
              <li>a constructor that returns a usable NFA object</li>
              <li>a <c>__repr__()</c> method that dumps the current formal
              specification of the NFA to the output</li>
              <li>
                a helper method <c>do_delta()</c> that simulates the (non-extended)
                transition function <m>\delta</m>. This method should handle missing
                transitions gracefully, since it is for an NFA.
              </li>
              <li>
                a <c>run()</c> method that simulates the action of the
                extended transition function <m>\hat{\delta}</m> (see
                <xref ref="def-nfa-deltahat"/>). This method should call
                the <c>do_delta()</c> method. It should return a <c>bool</c>
                whose value indicates acceptance or rejection.
              </li>
            </ol>
          </p>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            Add another method to your <c>DFA</c> class. The method <c>NFA()</c>
            takes a <c>DFA</c> object as parameter and
            should return an instance of your <c>NFA</c> class that is equivalent to
            the passed DFA.
          </p>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            Also add a method <c>DFA()</c> to your NFA class. This method will
            perform the subset construction on the passed NFA, and return
            a <c>DFA</c> instance representing the DFA so constructed.
          </p>
        </statement>
        <hint>
          <p>
            This part is difficult to get working for all NFA.
            Obviously, the first difficulty here is the transition function.
            Be sure you are familiar with the available methods that belong
            to the classes you have chosen. You may need to use Python's
            <c>frozenset</c> type, which behaves like a <c>set</c> but is
            immutable. If you need to build a frozenset element by element,
            start with a normal set, and then convert when you are done.
          </p>
          <p>
            Another difficulty is constructing the power set. I recommend
            an iterative approach, although you can use recursion too. My
            preferred method is to use the natural correspondence between
            the elements of the power set and the binary representations
            of the integers from 0 to <m>2^{|Q|}</m>. Imagine that the
            states of <m>Q</m> are numbered from <m>0</m> to <m>n-1</m>.
            Then the
            <m>i</m>-th element of the power set <m>2^Q</m> is the set of states
            whose binary representation has a 1 in the <m>i</m>-th position.
          </p>
          <cd>
            <cline>def powerset(elems):</cline>
            <cline>    """Returns a set representing the power set of `elems`.</cline>
            <cline>    Note that this can be very expensive (time and space)</cline>
            <cline>    since the size of the power set is exponential in the</cline>
            <cline>    size of `elems`."""</cline>
            <cline></cline>
            <cline>    elems_list = list(elems) # need to use indexing</cline>
            <cline>    n = len(elems)</cline>
            <cline>    powerset_size = 2**n</cline>
            <cline>    result = set()</cline>
            <cline>    for i in range(powerset_size):</cline>
            <cline>        # item j from elems is in the ith element</cline>
            <cline>        # of the powerset if the binary rep of i</cline>
            <cline>        # has a 1 in position j</cline>
            <cline>        ith_subset = set()</cline>
            <cline>        for j in range(n):</cline>
            <cline>            if (i &amp; (1 &lt;&lt; j) &gt; 0):</cline>
            <cline>                ith_subset.add(elems_list[j])</cline>
            <cline>        result.add(frozenset(ith_subset))</cline>
            <cline>    return result</cline>
          </cd>
          <p>
            Finally, it is convenient to have access to the product function
            to form the Cartesian product <m>Q \times \Sigma</m>. The
            function <c>itertools.product</c> is available for this purpose.
            Try the following code in the Python console:
          </p>
          <console>
            <input prompt="&gt;&gt;&gt; ">import itertools</input>
            <input prompt="&gt;&gt;&gt; ">Q = {1, 2, 3}</input>
            <input prompt="&gt;&gt;&gt; ">Sigma = {'a', 'b'}</input>
            <input prompt="&gt;&gt;&gt; ">for q, a in itertools.product(Q, Sigma):</input>
            <input prompt="...     ">
                  print(q, a)</input>
            <output>1 a
1 b
2 a
2 b
3 a
3 b
            </output>
          </console>
        </hint>
      </task>
      <task>
        <statement>
          <p>
            The remaining 3 checks are allocated based on the quality and style
            of your code.
          </p>
        </statement>
      </task>
    </exercise>
  </exercises>
</section>
